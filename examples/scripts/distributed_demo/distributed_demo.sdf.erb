<?xml version="1.0" ?>
<%
  # World generator
  #
  # Command line options (usage erb [opt]=[arg]):
  # type: primary / secondary / standalone (not distributed)
  # s: seed for random number generator
  # lv: 1 to generate level visuals
  # n_x: Number of tiles in X
  # n_y: Number of tiles in Y

  ###############################################
  #                                             #
  #           COMMAND LINE ARGUMENTS            #
  #                                             #
  ###############################################

  vars = ARGV.take_while {|arg| arg[/^\w+=/]}
  ARGV.slice!(0, vars.size)
  vars.each do |var|
    k, v = var.split('=', 2)
    TOPLEVEL_BINDING.eval %Q(#{k} = "#{v}")
  end

  primary = false;
  secondary = false;
  if (defined? type)
    if (type.to_s == 'primary')
      primary = true
    elsif (type.to_s == 'secondary')
      secondary = true
    elsif (type.to_s == 'standalone')
      primary = true
      secondary = true
    end
  end

  level_visuals = false
  if (defined? lv and lv == '1')
    level_visuals = true
  end

  seed = rand(0..10000000)
  if (defined? s)
    seed = s.to_i
  end
  srand(seed)

  num_x = 20
  if (defined? n_x)
    num_x = n_x.to_i
  end

  num_y = 20
  if (defined? n_y)
    num_y = n_y.to_i
  end

  ###############################################
  #                                             #
  #                  TILES                      #
  #                                             #
  ###############################################

  tile_size = 20
  tile_height = 10

  level_buffer = 0.5

  tiles =
  [
    'Cave Tile 1',
    'Cave Tile 3',
    'Cave Tile 5',
    'Cave Tile 6',
    'Cave Tile 7',
    'Cave Tile 8',
  ]

  ###############################################
  #                                             #
  #                PERFORMERS                   #
  #                                             #
  ###############################################

  performers = num_y / 2
  perf_size = 1

  ###############################################
  #                                             #
  #             PRINT FUNCTIONS                 #
  #                                             #
  ###############################################

  # Print geometry
  # Parameters:
  # _geom: box, cylinder or sphere
  # _sizeX: X size
  # _sizeY: Y size
  # _sizeZ: Z size
  def printGeom(_geom, _sizeX, _sizeY = 0, _sizeZ = 0)

    if (_geom == 'box')
      "<geometry>\n"\
      "       <box>\n"\
      "         <size>\n"\
      "           " + _sizeX.to_s() + "\n"\
      "           " + _sizeY.to_s() + "\n"\
      "           " + _sizeZ.to_s() + "\n"\
      "         </size>\n"\
      "        </box>\n"\
      "      </geometry>\n"
    elsif (_geom == 'sphere')
      "<geometry>\n"\
      "       <sphere>\n"\
      "         <radius>\n"\
      "           " + (_sizeX * 0.5).to_s() + "\n"\
      "         </radius>\n"\
      "        </sphere>\n"\
      "      </geometry>\n"
    elsif (_geom == 'cylinder')
      "<geometry>\n"\
      "       <cylinder>\n"\
      "         <radius>\n"\
      "           " + (_sizeX * 0.5).to_s() + "\n"\
      "         </radius>\n"\
      "         <length>\n"\
      "           " + _sizeY.to_s() + "\n"\
      "         </length>\n"\
      "        </cylinder>\n"\
      "      </geometry>\n"
    end

  end
%>
<!--
  Generated from distributed_demo.erb.sdf

  - primary: <%= primary %>
  - secondary: <%= secondary %>
  - seed: <%= seed %>
  - n_x: <%= num_x %>
  - n_y: <%= num_y %>

-->
<sdf version="1.6">
  <world name="default">

    <% if secondary %>
    <plugin
     filename="libignition-gazebo-physics-system.so"
     name="ignition::gazebo::systems::Physics">
    </plugin>
    <% end %>

    <% if primary %>
    <plugin
      filename="libignition-gazebo-scene-broadcaster-system.so"
      name="ignition::gazebo::systems::SceneBroadcaster">
    </plugin>

    <gui fullscreen="0">

      <!-- 3D scene -->
      <plugin filename="Scene3D" name="3D View">
        <ignition-gui>
          <title>3D View</title>
          <property type="bool" key="showTitleBar">false</property>
          <property type="string" key="state">docked</property>
        </ignition-gui>

        <engine>ogre</engine>
        <scene>scene</scene>
        <ambient_light>0.4 0.4 0.4</ambient_light>
        <background_color>0.43 0.32 0.19</background_color>
        <camera_pose>-6 0 6 0 0.5 0</camera_pose>
        <service>/world/default/scene/info</service>
        <pose_topic>/world/default/pose/info</pose_topic>
        <scene_topic>/world/default/scene/info</scene_topic>
        <deletion_topic>/world/default/scene/deletion</deletion_topic>
      </plugin>

      <!-- World control -->
      <plugin filename="WorldControl" name="World control">
        <ignition-gui>
          <title>World control</title>
          <property type="bool" key="showTitleBar">false</property>
          <property type="bool" key="resizable">false</property>
          <property type="double" key="height">72</property>
          <property type="double" key="width">121</property>
          <property type="double" key="z">1</property>

          <property type="string" key="state">floating</property>
          <anchors target="3D View">
            <line own="left" target="left"/>
            <line own="bottom" target="bottom"/>
          </anchors>
        </ignition-gui>

        <play_pause>true</play_pause>
        <step>true</step>
        <start_paused>true</start_paused>
        <service>/world/default/control</service>
        <stats_topic>/world/default/stats</stats_topic>

      </plugin>

      <!--World statistics -->
      <plugin filename="WorldStats" name="World stats">
        <ignition-gui>
          <title>World stats</title>
          <property type="bool" key="showTitleBar">false</property>
          <property type="bool" key="resizable">false</property>
          <property type="double" key="height">110</property>
          <property type="double" key="width">290</property>
          <property type="double" key="z">1</property>

          <property type="string" key="state">floating</property>
          <anchors target="3D View">
            <line own="right" target="right"/>
            <line own="bottom" target="bottom"/>
          </anchors>
        </ignition-gui>

        <sim_time>true</sim_time>
        <real_time>true</real_time>
        <real_time_factor>true</real_time_factor>
        <iterations>true</iterations>
        <topic>/world/default/stats</topic>

      </plugin>

    </gui>
    <% end %>

    <scene>
      <ambient>0.8 0.8 0.8 1.0</ambient>
      <background>0 0 0 1.0</background>
      <grid>false</grid>
      <origin_visual>false</origin_visual>
    </scene>

    <model name="ground_plane">
      <static>true</static>
      <link name="link">
        <collision name="collision">
          <geometry>
            <plane>
              <normal>0 0 1</normal>
            </plane>
          </geometry>
          <surface>
            <friction>
              <ode>
                <mu>1</mu>
              </ode>
            </friction>
          </surface>
        </collision>
      </link>
    </model>

    <%
      for perf in (0..performers)

        if perf == 0
          posX = tile_size * 0.5 + perf_size
          posY = tile_size
          yaw = 0
        else
          posX = perf * tile_size * 2
          posY = tile_size * 0.5 + perf_size
          yaw = Math::PI * 0.5
        end

        posZ = 0.2
        roll = 0
        pitch = 0
    %>

    <include>
      <name>vehicle_<%= perf.to_s %></name>
      <pose>
        <%= posX %>
        <%= posY %>
        <%= posZ %>
        <%= roll %>
        <%= pitch %>
        <%= yaw %>
      </pose>
      <uri>https://fuel.ignitionrobotics.org/1.0/openrobotics/models/X1</uri>
      <plugin
        filename="libignition-gazebo-diff-drive-system.so"
        name="ignition::gazebo::systems::DiffDrive">
        <left_joint>front_left_wheel_joint</left_joint>
        <left_joint>rear_left_wheel_joint</left_joint>
        <right_joint>front_right_wheel_joint</right_joint>
        <right_joint>rear_right_wheel_joint</right_joint>
        <wheel_separation>0.45649</wheel_separation>
        <wheel_radius>0.1651</wheel_radius>
      </plugin>
    </include>
    <% end %>

    <%
      for x in (1..num_x)
        for y in (1..num_y)
          posX = x * tile_size
          posY = y * tile_size
          posZ = 0
          roll = 0
          pitch = 0
          yaw = [0, Math::PI, Math::PI * 0.5, Math::PI * -0.5].sample()
    %>
    <include>
      <name>tile_<%= x.to_s %>_<%= y.to_s %></name>
      <pose>
        <%= posX %>
        <%= posY %>
        <%= posZ %>
        <%= roll %>
        <%= pitch %>
        <%= yaw %>
      </pose>
      <uri>https://fuel.ignitionrobotics.org/1.0/openrobotics/models/<%= tiles.sample() %></uri>
    </include>

    <% if level_visuals %>
    <model name="level_vis_<%= x.to_s %>_<%= y.to_s %>">
      <static>true</static>
      <pose>
        <%= posX %>
        <%= posY %>
        <%= posZ %>
        <%= roll %>
        <%= pitch %>
        <%= yaw %>
      </pose>
      <link name="link">
        <visual name="visual_level">
          <geometry>
            <box>
              <size><%= tile_size %> <%= tile_size %> <%= tile_height %></size>
            </box>
          </geometry>
          <material>
            <ambient>0 0 0.8 0.2</ambient>
            <diffuse>0 0 0.8 0.2</diffuse>
            <specular>0 0 0.8 0.2</specular>
          </material>
        </visual>
        <visual name="visual_buffer">
          <geometry>
            <box>
              <size>
                <%= tile_size + level_buffer*2 %>
                <%= tile_size + level_buffer*2 %>
                <%= tile_size  + level_buffer*2 %>
              </size>
            </box>
          </geometry>
          <material>
            <ambient>0 0.8 0.8 0.2</ambient>
            <diffuse>0 0.8 0.8 0.2</diffuse>
            <specular>0 0.8 0.8 0.2</specular>
          </material>
        </visual>
      </link>
    </model>
    <% end %>
    <% end %>
    <% end %>

    <plugin name="ignition::gazebo" filename="dummy">

    <%
      for perf in (0..performers)
    %>
      <performer name="perf_<%= perf.to_s %>">
        <ref>vehicle_<%= perf.to_s %></ref>
        <geometry>
          <box>
            <size>
              <%= perf_size %>
              <%= perf_size %>
              <%= perf_size %>
            </size>
          </box>
        </geometry>
      </performer>
    <% end %>

    <%
      for x in (1..num_x)
        for y in (1..num_y)
          posX = x * tile_size
          posY = y * tile_size
          posZ = 0
    %>
    <level name="level_<%= x.to_s %>_<%= y.to_s %>">
      <pose>
        <%= posX %>
        <%= posY %>
        <%= posZ %>
        0 0 0
      </pose>
      <geometry>
        <box>
          <size><%= tile_size %> <%= tile_size %> <%= tile_height %></size>
        </box>
      </geometry>
      <buffer><%= level_buffer %></buffer>
      <ref>tile_<%= x.to_s %>_<%= y.to_s %></ref>
    </level>
    <% end %>
    <% end %>

    </plugin>

  </world>
</sdf>
